// +build e2e

package e2e

import (
	"flag"
	"log"
	"os"
	"testing"

	corev1 "k8s.io/api/core/v1"
	kuberrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/knative/build/pkg/apis/build/v1alpha1"
	"github.com/knative/pkg/test"
)

// TestMain is called by the test binary generated by "go test", and is
// responsible for setting up and tearing down the testing environment, namely
// the test namespace.
func TestMain(m *testing.M) {
	flag.Parse()
	clients, err := newClients(test.Flags.Kubeconfig, test.Flags.Cluster, buildTestNamespace)
	if err != nil {
		log.Fatalf("newClients: %v", err)
	}

	// Ensure the test namespace exists, by trying to create it and ignoring
	// already-exists errors.
	if _, err := clients.kubeClient.Kube.CoreV1().Namespaces().Create(&corev1.Namespace{
		ObjectMeta: metav1.ObjectMeta{
			Name: buildTestNamespace,
		},
	}); err == nil {
		log.Printf("Created namespace %q", buildTestNamespace)
	} else if kuberrors.IsAlreadyExists(err) {
		log.Printf("Namespace %q already exists", buildTestNamespace)
	} else {
		log.Fatalf("Creating namespace %q: %v", buildTestNamespace, err)
	}

	defer func() {
	}()

	code := m.Run()

	// Delete the test namespace to be recreated next time.
	if err := clients.kubeClient.Kube.CoreV1().Namespaces().Delete(buildTestNamespace, &metav1.DeleteOptions{}); err != nil && !kuberrors.IsNotFound(err) {
		log.Fatalf("Deleting namespace %q: %v", buildTestNamespace, err)
	}
	log.Printf("Deleted namespace %q", buildTestNamespace)

	os.Exit(code)
}

// TestSimpleBuild tests that a simple build that does nothing interesting
// succeeds.
func TestSimpleBuild(t *testing.T) {
	clients := setup(t)

	buildName := "simple-build"
	if _, err := clients.buildClient.builds.Create(&v1alpha1.Build{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: buildTestNamespace,
			Name:      buildName,
		},
		Spec: v1alpha1.BuildSpec{
			Steps: []corev1.Container{{
				Image: "busybox",
				Args:  []string{"echo", "simple"},
			}},
		},
	}); err != nil {
		t.Fatalf("Create: %v", err)
	}

	if _, err := clients.buildClient.watchBuild(buildName); err != nil {
		t.Fatalf("watchBuild: %v", err)
	}
}

// TestFailingBuild tests that a simple build that fails, fails as expected.
func TestFailingBuild(t *testing.T) {
	clients := setup(t)

	buildName := "failing-build"
	if _, err := clients.buildClient.builds.Create(&v1alpha1.Build{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: buildTestNamespace,
			Name:      buildName,
		},
		Spec: v1alpha1.BuildSpec{
			Steps: []corev1.Container{{
				Image: "busybox",
				Args:  []string{"false"}, // fails.
			}},
		},
	}); err != nil {
		t.Fatalf("Create: %v", err)
	}

	if _, err := clients.buildClient.watchBuild(buildName); err == nil {
		t.Fatalf("watchBuild did not return expected error: %v", err)
	}
}
